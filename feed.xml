<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://passepartoutvpn.app/feed.xml" rel="self" type="application/atom+xml" /><link href="https://passepartoutvpn.app/" rel="alternate" type="text/html" /><updated>2025-04-28T09:33:42+02:00</updated><id>https://passepartoutvpn.app/feed.xml</id><title type="html">Passepartout is your go-to app for VPN and privacy.</title><subtitle>Passepartout is your go-to app for VPN and privacy. Tailored for Apple platforms, Passepartout is open-source and fully available on GitHub.</subtitle><author><name>Davide De Rosa</name></author><entry><title type="html">Introducing the JavaScript API</title><link href="https://passepartoutvpn.app/2025/04/introducing-the-javascript-api/" rel="alternate" type="text/html" title="Introducing the JavaScript API" /><published>2025-04-24T00:00:00+02:00</published><updated>2025-04-24T00:00:00+02:00</updated><id>https://passepartoutvpn.app/2025/04/introducing-the-javascript-api</id><content type="html" xml:base="https://passepartoutvpn.app/2025/04/introducing-the-javascript-api/"><![CDATA[<p>While I invest a lot in making the software architecture as modular as I can, I haven’t spent as much time in documenting <em>how</em> to start contributing to the codebase. I know myself how intimidating it is to submit a PR to someone else’s repository, so it’s crucial that we, the maintainers, provide a viable entry point to those willing to collaborate. A welcoming, non-judging community also reduces the friction of the first public contribution.</p>

<p>One part that I’ve always found potentially accessible was the Providers API, which is how Passepartout auto-compiles VPN configurations for a plethora of provider servers. Nevertheless, no one ever contributed a single provider, and no wonder: providers were generated in CI with a convoluted set of undocumented Ruby scripts. Who on Earth would want to touch that mess?</p>

<p>When I found out about <a href="https://developer.apple.com/documentation/javascriptcore">JavaScriptCore</a> to solve a different problem, I suddenly realized how scripting could be a lower barrier to enter the Passepartout codebase, as there are way more JavaScript than Swift developers out there.</p>

<p>With the help of AI, I rapidly converted the old Ruby legacy to a brand new <a href="https://github.com/passepartoutvpn/api-source">Node.js implementation</a> that most developers would find easy to understand, develop, and test without even installing the app. Then I started documenting <a href="https://github.com/passepartoutvpn/api-source?tab=readme-ov-file#new-providers">how to submit a provider</a> step by step. This doesn’t imply that people will start adding new providers today, but offering accessible tools and documentation is a <em>strict</em> requirement for that to happen.</p>]]></content><author><name>Davide De Rosa</name></author><category term="development" /><category term="javascript" /><summary type="html"><![CDATA[While I invest a lot in making the software architecture as modular as I can, I haven’t spent as much time in documenting how to start contributing to the codebase. I know myself how intimidating it is to submit a PR to someone else’s repository, so it’s crucial that we, the maintainers, provide a viable entry point to those willing to collaborate. A welcoming, non-judging community also reduces the friction of the first public contribution.]]></summary></entry><entry><title type="html">Porting Passepartout to Windows</title><link href="https://passepartoutvpn.app/2025/04/porting-passepartout-to-windows/" rel="alternate" type="text/html" title="Porting Passepartout to Windows" /><published>2025-04-14T00:00:00+02:00</published><updated>2025-04-14T00:00:00+02:00</updated><id>https://passepartoutvpn.app/2025/04/porting-passepartout-to-windows</id><content type="html" xml:base="https://passepartoutvpn.app/2025/04/porting-passepartout-to-windows/"><![CDATA[<p>As <a href="">Partout</a>, my Swift framework for VPN and network configuration on Apple devices, has slowly gained shape, I set foot in an ambitious and novel, pioneering goal: <strong>making Partout a truly multiplatform Swift library</strong>.</p>

<p>It’s challenging, but it’s fun, and it’s the way to port <a href="https://passepartoutvpn.app">Passepartout</a> beyond the Apple platforms. So, here, I will progressively share my discoveries and encourage other people to give Swift a chance as a portable language. The language itself is fantastic. Using it outside Xcode? Not as much, but I’ve observed the trends over the years, and overall, things are getting better.</p>

<p>Bear with me, this is a <em>very experimental</em> work in progress, that’s why I’d rather start with architectural concepts, and delve into technical details only after confirming that my approaches do well in practice.</p>]]></content><author><name>Davide De Rosa</name></author><category term="development" /><category term="swift" /><category term="windows" /><summary type="html"><![CDATA[As Partout, my Swift framework for VPN and network configuration on Apple devices, has slowly gained shape, I set foot in an ambitious and novel, pioneering goal: making Partout a truly multiplatform Swift library.]]></summary></entry><entry><title type="html">Who cares about performance?</title><link href="https://passepartoutvpn.app/2025/03/who-cares-about-performance/" rel="alternate" type="text/html" title="Who cares about performance?" /><published>2025-03-25T00:00:00+01:00</published><updated>2025-03-25T00:00:00+01:00</updated><id>https://passepartoutvpn.app/2025/03/who-cares-about-performance</id><content type="html" xml:base="https://passepartoutvpn.app/2025/03/who-cares-about-performance/"><![CDATA[<p>While many people copy and paste unoriginal thoughts about AI and the so-called “vibe coding”, it seems that what used to make software valuable is constantly put aside. If you try to argue that tech <em>does</em> matter in a tech-oriented product, they will tell you that:</p>

<ul>
  <li>Business is more important than engineering</li>
  <li>Software is useless if it doesn’t make money</li>
  <li>Users only care about features</li>
  <li>Devices are powerful, performance doesn’t matter</li>
  <li>Internet is fast, a few more GBs won’t hurt</li>
</ul>

<p>And many more dumb takes. This is the typical mentality by which consultancy firms produce the most mediocre products you will ever find.</p>

<p>I don’t want to delve into this endless – and hopeless – topic. Instead, I want to tell you a little story of how easy it is to lose control of software <em>performance</em>, and how the understanding of programming fundamentals keeps us in touch with reality. This has never been more important with the fast-paced opportunities that LLMs offer today.</p>

<h3 id="can-you-afford-low-performance">Can you afford low performance?</h3>

<p>I’m far from being a low-level programmer, yet I know C and the fundamentals of how things happen below the code.</p>

<p><a href="https://passepartoutvpn.app">Passepartout</a> is a networking app mostly dealing with VPN connections. At least in the tunnel context, performance <em>does</em> matter. When it comes to OpenVPN in particular, it’s very hard to compete with a pure C codebase – the official library – when you also have to account for the overhead of the Swift runtime. Let’s not forget about the <a href="https://developer.apple.com/forums/thread/73148">strict memory limits</a> of Network Extension either. The time I spent on profiling to improve efficiency, resolve memory leaks, and reduce the crash rate, among other things, is pretty massive.</p>

<p>Two months ago, a user reported a regression in the OpenVPN negotiation where the handshake would never complete. I could implement a fix quickly, yet the handshake took 4x longer than with the obsolete TunnelKit. A whopping and unacceptable 20-25s vs 5s negotiation!</p>]]></content><author><name>Davide De Rosa</name></author><category term="development" /><category term="swift" /><summary type="html"><![CDATA[While many people copy and paste unoriginal thoughts about AI and the so-called “vibe coding”, it seems that what used to make software valuable is constantly put aside. If you try to argue that tech does matter in a tech-oriented product, they will tell you that:]]></summary></entry><entry><title type="html">The roadmap for 2025</title><link href="https://passepartoutvpn.app/2025/03/the-roadmap-for-2025/" rel="alternate" type="text/html" title="The roadmap for 2025" /><published>2025-03-17T00:00:00+01:00</published><updated>2025-03-17T00:00:00+01:00</updated><id>https://passepartoutvpn.app/2025/03/the-roadmap-for-2025</id><content type="html" xml:base="https://passepartoutvpn.app/2025/03/the-roadmap-for-2025/"><![CDATA[<p>Recently, I made <a href="https://github.com/orgs/passepartoutvpn/projects/9">my current backlog</a> public. I like to share what I’m working on, and in future posts, I’ll talk about how GitHub Projects helps me plan the development of Passepartout without losing my mind.</p>

<p>Here I present a sneak peek of what 2025 has been so far, and what I envision for the remainder of the year.</p>

<h2 id="short-term">Short-term</h2>

<h3 id="stability-again">Stability, again</h3>

<p>Reaching stability after <a href="/2025/03/rewriting-passepartout-for-v3/">rewriting Passepartout v3</a> has been <em>extremely</em> challenging. Despite being a mid-to-small project, it’s insanely hard to keep track of all the tiny details and edge cases covered in such a long development history. Regressions (i.e. features that used to work but are broken by an update) are just inevitable.</p>

<p>I wonder how many people have realized that <a href="https://github.com/passepartoutvpn/passepartout/releases">Passepartout has seen 14 updates</a> in less than two months. The criticism, the problems with in-app purchases, and the unforgiving reviews that most customers don’t care to update when a problem is fixed. The funniest part was those blaming me for being a “money grabber” at a time when the cost/benefit ratio of working on Passepartout was at a historical minimum. I worked up to 100h/week while seeing sales going down 60%.</p>

<p>But I’m still alive!</p>

<h3 id="providers-api">Providers API</h3>

<p>The JSON API of Passepartout has been a drag for too long. The time has come to rework it because it’s also a privacy concern for providers, API calls should be authenticated. The outcome will be a better overall integration and support for WireGuard in providers. Mullvad is likely to be the first one because of the <a href="https://www.reddit.com/r/mullvadvpn/comments/1gmf2id/removing_openvpn_15th_january_2026_blog_mullvad/">more stringent deadline</a>.</p>

<h3 id="standalone-mac-release">Standalone Mac release</h3>

<p>This is the one I’m mostly excited about: releasing Passepartout as a .dmg for macOS, outside of the App Store. The app will be limited to free features until I implement a way to receive payments without the App Store.</p>

<h2 id="mid-term">Mid-term</h2>

<h3 id="more-providers">More providers</h3>

<p>A direct consequence of a better-designed API is making room for more providers.</p>

<h3 id="more-protocols">More protocols</h3>

<p>I’d rather disclose this later, but I’d like to extend the suite of supported VPN protocols. Maybe more than just VPN.</p>

<h2 id="long-term">Long-term</h2>

<h3 id="new-platforms">New platforms</h3>

<p>A long-term goal that will not make it to 2025, but that’s been on the back of my head, is opening up to non-Apple platforms. There’s nothing concrete yet, but I’ve been designing the new codebase with this in mind.</p>

<h2 id="the-app-is-already-better-than-v2">The app is already better than v2</h2>

<p>Lastly, I want to spend some words on the new app.</p>

<p>We usually take things that work for granted and complain about things that don’t. It’s human nature. Over the years, I learned that a silent customer is a happy customer and that a noisy one may be right, but not that often.</p>

<p>Even when the update was receiving the biggest hate, I knew that the app would be better, but I could not blame the users “for not seeing it”. An app like Passepartout is best when you don’t notice that it’s running.</p>

<p>I know that the app is better from an engineering perspective. Let me tell you, instead, why v3 is better <em>as an user</em>:</p>

<ul>
  <li>Better battery consumption</li>
  <li>Super-low crash rate</li>
  <li>Native Mac app</li>
  <li>Mac menu consistent with the app</li>
  <li>Per-profile iCloud sync</li>
  <li>TV app is beautiful and sync is reliable</li>
  <li>Shortcuts run in the background</li>
  <li>Stable UI with consistent L&amp;F and animations</li>
  <li>Much better provider server selection</li>
  <li>Custom light/dark appearance</li>
  <li>Interactive login</li>
  <li>Route custom DNS inside/outside VPN</li>
  <li>Edit WireGuard configurations</li>
  <li>Convenient OTP field for OpenVPN (WIP)</li>
  <li>Plenty of resolved OpenVPN bugs
    <ul>
      <li>Connection stuck randomly</li>
      <li>Occasionally stuck when Wi-Fi/Mobile roaming</li>
      <li>Regularly stuck when back from sleep</li>
      <li>Disconnection on “Message too long”</li>
      <li>Disconnection on “No buffer space available”</li>
      <li>Disconnection during renegotiations</li>
      <li>Slow to reconnect</li>
      <li>Memory leaks</li>
      <li>…</li>
    </ul>
  </li>
</ul>

<p>Thanks to those who are trusting the process.</p>]]></content><author><name>Davide De Rosa</name></author><category term="planning" /><category term="announcements" /><summary type="html"><![CDATA[Recently, I made my current backlog public. I like to share what I’m working on, and in future posts, I’ll talk about how GitHub Projects helps me plan the development of Passepartout without losing my mind.]]></summary></entry><entry><title type="html">Rewriting Passepartout for v3</title><link href="https://passepartoutvpn.app/2025/03/rewriting-passepartout-for-v3/" rel="alternate" type="text/html" title="Rewriting Passepartout for v3" /><published>2025-03-11T00:00:00+01:00</published><updated>2025-03-11T00:00:00+01:00</updated><id>https://passepartoutvpn.app/2025/03/rewriting-passepartout-for-v3</id><content type="html" xml:base="https://passepartoutvpn.app/2025/03/rewriting-passepartout-for-v3/"><![CDATA[<p>For software to live a long life, it must grow together with our experience. If our skills improve at a faster pace than we maintain our software, its design will start to drift away from our standards and expectations. If we let the gap increase for too long, it will eventually be impossible to catch up, and we’ll end up hating our creations.</p>

<h2 id="version-2-was-a-mess">Version 2 was a mess</h2>

<p>Passepartout used to be two separate iOS and macOS apps, with all the complications that this implies. In 2022, I used Passepartout to learn <a href="https://developer.apple.com/xcode/swiftui/">SwiftUI</a> –I considered Flutter initially– and make v2 a partially multiplatform app. Partially because the macOS app was a hybrid <a href="https://developer.apple.com/mac-catalyst/">Catalyst/iPad</a> app, a terrible choice if I think of it today. I don’t even know why I did it, but whatever.</p>

<p>The conclusions I drew after v2:</p>

<ul>
  <li>SwiftUI is very hard to get right. I had to rewrite my views multiple times due to my wrong understanding of the framework.</li>
  <li>Catalyst made the macOS app an ugly and unstable iPadOS app, let alone a complete nightmare to develop.</li>
  <li>The time I spent on the Mac system menu, in particular, was beyond ridiculous. Maybe I’ll dedicate a post to this clunky Catalyst/AppKit interaction.</li>
  <li>The app core was overengineered, untested, untestable, and confusing.</li>
  <li><a href="https://github.com/passepartoutvpn/tunnelkit">TunnelKit</a> was already unmanageable and inextensible. Touching the wrong line could break connectivity for thousands of users.</li>
</ul>

<p>I’m aware that we, developers, occasionally suffer an innate tendency to be unsatisfied with our choices, whatever they are. Redoing the same things over and over is detrimental to making progress, though. Therefore, rewriting software should <em>never</em> be your first choice. That’s why I ruminated around the idea for months, but the rewrite was inevitable 7 years after the first release.</p>

<p>Users don’t and can’t realize the amount of bugs that Passepartout v2 and TunnelKit had. The codebase, <em>my codebase</em>, was such a high barrier that it took me a year (2022 to 2023) to resolve some legitimate concerns with iCloud. Requests/bugs were sadly flowing at 30x the speed I was able to address them. The app was half abandoned.</p>

<p>It’s, however, very risky to rewrite an app that was stable, making decent money, and required very little support despite a user base in the hundreds of thousands. To end up, one year later, with the same app with more or less the same features.</p>

<p>Rewriting must be <em>really</em> worth it.</p>

<h2 id="the-costbenefit-of-rewriting-software">The cost/benefit of rewriting software</h2>

<p>Version 3 is the last time I <em>intend</em> to attack the foundations of Passepartout.</p>

<p>So many times I rewrote code in my life with the sole intent of working in a “beautiful” codebase, not realizing how quickly the enthusiasm wanes when the development routine is back to normal. Give it a few months and, no matter what, your codebase will look “ugly” again. It never ends.</p>

<p>I learned not to rely on “beauty” to bring me back to the joy of programming. After all, when I wrote those nasty lines 10 years ago, I probably thought it was the state of the art. Right?</p>

<p>Today, I try to refactor software as a regular exercise, but at a smaller scale, and with a different purpose:</p>

<p><strong>Make my changes last as long as possible.</strong></p>

<p>Below is what I did in 2024 –part-time until August– for this major update:</p>

<ul>
  <li><a href="https://github.com/orgs/passepartoutvpn/projects/1/views/4?filterQuery=">The GitHub Project for v3</a></li>
  <li><a href="https://github.com/orgs/passepartoutvpn/projects/1/views/8?filterQuery=">The tasks split by goal</a></li>
</ul>

<p>The project encompassed ~1000 items, of which ~350 are invisible for being in private repositories. An insane amount of work, in hindsight.</p>

<p>Today, I can confirm that it was by no means a waste of time. After one year of development, the success of this reengineering is summarized in a sentence:</p>

<p><strong>Most areas of Passepartout won’t need to be modified for years to come.</strong></p>

<p>This is the single measure you want to focus on when considering a big architectural redesign: the time you save in the long run must dramatically compensate for the effort of rewriting. With this mantra, good design will be the natural consequence. Because good design, ultimately, is meant to save development time.</p>

<p>The best code of your software is the one you forget about, the one you don’t need to touch ever again.</p>]]></content><author><name>Davide De Rosa</name></author><category term="development" /><category term="refactoring" /><category term="planning" /><summary type="html"><![CDATA[For software to live a long life, it must grow together with our experience. If our skills improve at a faster pace than we maintain our software, its design will start to drift away from our standards and expectations. If we let the gap increase for too long, it will eventually be impossible to catch up, and we’ll end up hating our creations.]]></summary></entry><entry><title type="html">Deploying to the App Store: The cost you didn’t expect</title><link href="https://passepartoutvpn.app/2025/03/deploying-to-the-app-store-the-cost-you-didn-t-expect/" rel="alternate" type="text/html" title="Deploying to the App Store: The cost you didn’t expect" /><published>2025-03-03T00:00:00+01:00</published><updated>2025-03-03T00:00:00+01:00</updated><id>https://passepartoutvpn.app/2025/03/deploying-to-the-app-store-the-cost-you-didn-t-expect</id><content type="html" xml:base="https://passepartoutvpn.app/2025/03/deploying-to-the-app-store-the-cost-you-didn-t-expect/"><![CDATA[<p>Passepartout has had a <a href="https://github.com/passepartoutvpn/passepartout/actions/runs/13551048532">solid and unique CI/CD workflow</a> for years, from Git commits straight to the App Store. For iPhone, iPad, Mac, and Apple TV.</p>

<p>I dare to say, automated releases are hardly (if <em>ever</em>) seen in open-source *OS apps.</p>

<p><a href="https://docs.fastlane.tools/">fastlane</a>, created by <a href="https://krausefx.com/">Felix Krause</a>, and <a href="https://github.com/features/actions">GitHub Actions</a> helped me immensely with the fast turnaround of Passepartout releases. In the era of LLMs, you have no excuses to waste time for not using these incredible tools.</p>

<p>Let me show why CI/CD is one of the most important and underestimated aspects of making indie software, or software in general.</p>]]></content><author><name>Davide De Rosa</name></author><category term="development" /><category term="ci/cd" /><summary type="html"><![CDATA[Passepartout has had a solid and unique CI/CD workflow for years, from Git commits straight to the App Store. For iPhone, iPad, Mac, and Apple TV.]]></summary></entry><entry><title type="html">The path to an obscure crash</title><link href="https://passepartoutvpn.app/2025/03/the-path-to-an-obscure-crash/" rel="alternate" type="text/html" title="The path to an obscure crash" /><published>2025-03-02T00:00:00+01:00</published><updated>2025-03-02T00:00:00+01:00</updated><id>https://passepartoutvpn.app/2025/03/the-path-to-an-obscure-crash</id><content type="html" xml:base="https://passepartoutvpn.app/2025/03/the-path-to-an-obscure-crash/"><![CDATA[<p>One month after its first, painful release, Passepartout v3 is close to being stable.</p>

<p>However, a couple of regressions were still haunting me.</p>

<p>Here I want to describe the absurd journey into one of them, that started with a report <a href="https://github.com/passepartoutvpn/passepartout/issues/1204">from GitHub</a>, and <a href="https://www.reddit.com/r/passepartout/comments/1j0lbqa/not_open_in_sonoma_any_idea/">one from Reddit</a>. Both users were reporting that the Mac app was crashing on launch.</p>

<p>The reports led me to think that the regression was caused by the macOS version, or the CPU architecture, as both users were using an Intel-based machine.</p>

<h3 id="the-xcode-organizer">The Xcode Organizer</h3>

<p>I had several (unhelpful) crashes in the Xcode Organizer confirming the issue:</p>

<div class="h-scrolling">
    <img alt="Xcode Organizer" src="/s/posts/2025-03-03-01.png" />
</div>

<p>Looking further into some crashes, I could spot a few SIGILL (Illegal Hardware Instruction) that reinforced the idea of a platform-related issue. Add to that, one of the threads had intense Core Data + CloudKit activity ongoing. It must be Core Data, I thought, given that Passepartout performs its sync precisely when the app launches.</p>

<p><em>Doubt #1: how can the app launch at all if the arch is unsupported?</em></p>

<p><em>Doubt #2: is the Core Data stack trace relevant? Is it the thread that is actually crashing?</em></p>

<h3 id="never-read-crash-reports-only-once">Never read crash reports only once</h3>

<p>Passepartout is a privacy-oriented app. There is no external framework e.g. Firebase to help with crash resolution, so Xcode is the only technical resource at disposal. Plus the patient support from the affected users.</p>

<p>Eventually, Core Data was a distraction. Every report was crashing on “Thread 0”, i.e. the main thread. There were also crashes from macOS 15 and ARM64. Fewer, but non-zero.</p>

<p>This stack trace shed some light in that the injected AppDelegate could be the culprit. But where? And why?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Thread 0 Crashed:
0   Passepartout                    0x00000001029bb154 0x102764000 + 2453844
1   Passepartout                    0x00000001029baf6c 0x102764000 + 2453356
2   Passepartout                    0x00000001029bb83c 0x102764000 + 2455612
3   Passepartout                    0x00000001029ba6ac 0x102764000 + 2451116
4   Passepartout                    0x00000001029b66d4 0x102764000 + 2434772
5   Passepartout                    0x000000010276d0d4 0x102764000 + 37076
6   Passepartout                    0x000000010276c868 0x102764000 + 34920
7   libdispatch.dylib               0x000000018ab68658 _dispatch_client_callout + 20 (object.m:576)
8   libdispatch.dylib               0x000000018ab69ea0 _dispatch_once_callout + 32 (once.c:52)
9   Passepartout                    0x000000010276b2ac 0x102764000 + 29356
10  Passepartout                    0x000000010276b2f0 0x102764000 + 29424
11  Passepartout                    0x000000010276b3c0 0x102764000 + 29632
12  SwiftUI                         0x00000001b977a934 FallbackDelegateBox.delegate.getter + 68 (FallbackDelegateBox.swift:36)
13  SwiftUI                         0x00000001b9e8cea8 specialized NSApplicationDelegateAdaptor.wrappedValue.getter + 156 (FallbackDelegates_Mac.swift:93)
...
</code></pre></div></div>

<h3 id="reproducing-the-crash-pt-1">Reproducing the crash (pt. 1)</h3>

<p>Assuming that the AppDelegate was doing something wrong, there was even a much bigger issue: I could not reproduce the crash on my machine. I realized, though, that a friend of mine had an Intel MacBook with macOS 14, so I asked for his help.</p>

<p>He gave me access via AnyDesk to push ad hoc builds to the machine. The latest app version crashed consistently. Off to a good start. At that point, I spent a few hours trying to exclude potentially offending parts from the launch code, sadly to no avail. Consider that any change in the code implied archiving and sending a build via AnyDesk to test it. It was exhausting, and the afternoon led nowhere.</p>

<h3 id="reproducing-the-crash-pt-2">Reproducing the crash (pt. 2)</h3>

<p>I decide to give a shot to virtualization. Most crashes came from macOS 14, and not necessarily from Intel machines, so this could work. These were the steps:</p>

<ul>
  <li>Get <a href="https://mac.getutm.app/">UTM</a> to run a VM on Mac. <em>Highly recommended!</em></li>
  <li>Download a restore image for Sonoma (~14GB)</li>
  <li>Regenerate the provisioning profile with the VM UDID</li>
  <li>Send the development build via a shared folder to the VM</li>
</ul>

<p>The app crashes. Hooray!</p>

<h3 id="git-to-the-rescue">Git to the rescue</h3>

<p>Time to locate where the regression was introduced. I rebuilt the app for each commit that sounded relevant, and after 10-20 builds, I found out that the crash was introduced in <a href="https://github.com/passepartoutvpn/passepartout/pull/1200">this pull request</a> about the light/dark mode picker in the app preferences. WTF?!</p>

<p>It turns out, the widely used <a href="https://developer.apple.com/documentation/appkit/nsapp"><code class="language-plaintext highlighter-rouge">NSApp</code> singleton</a> is an <strong>implicitly unwrapped optional</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@MainActor
var NSApp: NSApplication!
</code></pre></div></div>

<p>and it was therefore used unsafely in this bit of the PR:</p>

<script src="https://emgithub.com/embed-v2.js?target=https%3A%2F%2Fgithub.com%2Fpassepartoutvpn%2Fpassepartout%2Fblob%2Fv3.1.1%2FPackages%2FApp%2FSources%2FUILibrary%2FBusiness%2FAppearanceManager.swift%23L66-73&amp;style=default&amp;type=code&amp;showBorder=on&amp;showLineNumbers=on&amp;showFileMeta=on&amp;showFullPath=on&amp;showCopy=on"></script>

<h3 id="a-race-condition-about-nsapp">A race condition about NSApp</h3>

<p>It’s finally revealed that, very early in a Mac app lifecycle, <code class="language-plaintext highlighter-rouge">NSApp</code> may be nil. This was more often the case on macOS 14 than 15, but still a hideous race condition.</p>

<p>Here goes the simplified stack call:</p>

<ul>
  <li>main</li>
  <li>AppDelegate.init</li>
  <li>AppearanceManager.init</li>
  <li>AppearanceManager.systemAppearance.didSet</li>
  <li>AppearanceManager.apply()</li>
  <li>NSApp.appearance = …</li>
</ul>

<p>In the last call, <code class="language-plaintext highlighter-rouge">NSApp</code> may be nil and implicitly unwrapped, leading to the crash.</p>

<h3 id="lessons-learned">Lessons learned</h3>

<p>This was one of those bugs that make you question everything—platform differences, architecture quirks, even Core Data conspiracies—before revealing a simple yet insidious root cause: a race condition with <code class="language-plaintext highlighter-rouge">NSApp</code>.</p>

<p>The takeaway? Even well-documented singletons aren’t always safe to assume as non-nil. And when debugging obscure crashes, patience and a systematic approach (plus a good VM setup) can make all the difference.</p>

<p>Passepartout v3.1.5 <a href="https://github.com/passepartoutvpn/passepartout/pull/1224">will handle this case properly</a>, ensuring that <code class="language-plaintext highlighter-rouge">NSApp</code> is accessed only when it’s actually available. Hopefully, that’s one less obscure crash lurking in the shadows.</p>

<p>To Apple and Swift: isn’t it about time to discourage/deprecate the use of implicitly unwrapped optionals?</p>]]></content><author><name>Davide De Rosa</name></author><category term="development" /><category term="swift" /><summary type="html"><![CDATA[One month after its first, painful release, Passepartout v3 is close to being stable.]]></summary></entry></feed>